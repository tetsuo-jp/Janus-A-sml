// Optimized Self-Interpreter
// To generate the sint program, type:
// $ sed -f sint_opt.janus.replace sint_opt.janus.in > sint_opt.janus

// Encoded program
pc

// Temporaries
op arg1 arg2 tmp result
op_tmp arg1_tmp arg2_tmp result_tmp

// Temporary stack
tmp_lhs
tmp_sp

procedure sint_init
  // Types
  pc ^= 0 // Program counter
  tmp_sp ^= -1 // stack pointer

// Evaluator of expressions
procedure eval
  if type[pc] = 100
  then result ^= para[pc]
  else if type[pc] = 101
  then result ^= sigma[para[pc]]
  else if type[pc] = 102
  then call eval_bop
       call next
       pc-=1
  else if type[pc] = 108
  then call eval_arr
       call next
       pc-=1
  else error eval
  fi type[pc] = 110
  fi type[pc] = 104
  fi type[pc] = 101
  fi type[pc] = 100
  pc+=1

procedure eval_bop
  call alloc_tmp
  call eval_bop_args
  if op = 303        then tmp ^= arg1 + arg2
  else if op = 304  then tmp ^= arg1 - arg2
  else if op = 309    then tmp ^= arg1 */ arg2
  else if op = 310    then tmp ^= arg1 & arg2
  else if op = 305    then tmp ^= arg1 ^ arg2
  else if op = 306  then tmp ^= arg1 * arg2
  else if op = 307    then tmp ^= arg1 / arg2
  else if op = 308    then tmp ^= arg1 % arg2
  else if op = 311     then tmp ^= arg1 | arg2
  else if op = 312 then tmp ^= arg1 && arg2
  else if op = 313   then tmp ^= arg1 || arg2
  else if op = 314     then tmp ^= arg1 < arg2
  else if op = 315     then tmp ^= arg1 > arg2
  else if op = 316     then tmp ^= arg1 = arg2
  else if op = 317    then tmp ^= arg1 != arg2
  else if op = 318     then tmp ^= arg1 <= arg2
  else if op = 319     then tmp ^= arg1 >= arg2
  else if 1 fi 0
  fi op = 319
  fi op = 318
  fi op = 317
  fi op = 316
  fi op = 315
  fi op = 314
  fi op = 313
  fi op = 312
  fi op = 311
  fi op = 308
  fi op = 307
  fi op = 306
  fi op = 305
  fi op = 310
  fi op = 309
  fi op = 304
  fi op = 303
  uncall eval_bop_args
  result <=> tmp
  uncall alloc_tmp

procedure eval_bop_args
  pc += 1
  call alloc_tmp   // refuge operator
  tmp ^= para[pc]  // refuge operator
  pc += 1
  call eval
  if arg1 then error eval_bop_args1 fi arg1 // for testing
  arg1 <=> result
  call eval
  if arg2 then error eval_bop_args2 fi arg2 // for testing
  arg2 <=> result
  op <=> tmp       // restore operator
  uncall alloc_tmp // restore operator

procedure eval_arr
  pc+=1
  call alloc_tmp
  tmp_lhs <=> tmp
  tmp_lhs ^= para[pc] // name of array
  pc += 1
  call eval
  tmp_lhs += result   // index of array
  call alloc_tmp
  tmp ^= sigma[tmp_lhs] // value of array
  tmp_lhs -= result   // index of array
  uncall eval
  pc -= 1
  tmp_lhs ^= para[pc] // name of array
  if result then error eval_arr fi result
  result <=> tmp
  uncall alloc_tmp
  if tmp_lhs then error eval_arr fi tmp_lhs
  tmp_lhs <=> tmp
  uncall alloc_tmp
  pc-=1

// Executor of statements
procedure exec
  from  type[pc] = 125
  do    pc += 1
  loop  call exec1
  until type[pc] = 126
  pc += 1

procedure exec1
  if type[pc] = 111  then call exec_assop
  else if type[pc] = 118 then call exec_from
  else if type[pc] = 114        then call exec_if
  else if type[pc] = 122       then call exec_call
  else if type[pc] = 123     then call exec_uncall
  else if type[pc] = 124
  else if type[pc] = 127 then call exec_swap
  else error in_exec1
  fi type[pc] = 128
  fi type[pc] = 124
  fi type[pc] = 123
  fi type[pc] = 122
  fi type[pc] = 117
  fi type[pc] = 121
  fi type[pc] = 113

procedure exec_if
  pc += 1
  call eval
  if result
  then uncall eval
       pc -= 1
       call next // to then
       call exec
       call next // to fi
       pc += 1
       call eval
  else uncall eval
       pc -= 1
       call next // to then
       call next // to else
       call exec
       pc += 1
       call eval
  fi result
  uncall eval
  pc -= 1
  call next // to end of statement
  pc -= 1

procedure exec_from
  pc += 1
  call eval
  from  result
  do    uncall eval
        pc -= 1
        call next // to do
        call exec
        call next // to until
        pc += 1
        call eval
  loop  uncall eval
        pc -= 1
        uncall next // to loop
        call exec
        uncall next // to loop
        uncall next // to do
        uncall next // to from
        pc += 1
        call eval
  until result
  uncall eval
  pc -= 1
  call next // to end of statement
  pc -= 1

// 111 => 113
procedure exec_assop
  call exec_assop_args
  call exec_assop_upd
  uncall exec_assop_args
  call next // to end of statement
  pc -= 1

procedure exec_assop_args
  pc += 1
  call alloc_tmp   // refuge assinment operator
  tmp ^= para[pc]  // refuge assinment operator
  pc += 1
  call eval // evaluation of lhs
  if tmp_lhs then error eval_bop_args3 fi tmp_lhs // for testing
  tmp_lhs <=> result
  call eval // evaluation of rhs
  if op then error eval_bop_args4 fi op // for testing
  op <=> tmp       // restore operator
  uncall alloc_tmp // restore operator

procedure exec_assop_upd
  if op = 200
  then sigma[tmp_lhs] += result
  else if op = 201
  then sigma[tmp_lhs] -= result
  else if op = 202
  then sigma[tmp_lhs] ^= result
  else error exec_assop_upd
  fi op = 202
  fi op = 201
  fi op = 200

procedure exec_call
  call exec_call_pc_swap
  call exec
  uncall next
  uncall exec_call_pc_swap

procedure exec_call_pc_swap
  tmp ^= para[pc]
  pc <=> tmp
  call alloc_tmp

procedure exec_uncall
  call exec_call_pc_swap
  call next
  uncall exec
  uncall exec_call_pc_swap

procedure exec_swap
  pc += 1
  call eval
  result_tmp <=> result
  op_tmp <=> op
  arg1_tmp <=> arg1
  arg2_tmp <=> arg2
  call eval
  sigma[result_tmp] <=> sigma[result]
  uncall eval
  arg2_tmp <=> arg2
  arg1_tmp <=> arg1
  op_tmp <=> op
  result_tmp <=> result
  uncall eval

  pc -= 1
  call next
  pc -= 1

// Starting on ``start'' and end on the next line to ``finish''
procedure next
  call alloc_tmp
  tmp+=para[pc]
  pc+=tmp
  tmp+=para[pc]
  if tmp then error in_next fi tmp // assertion
  uncall alloc_tmp
  pc+=1

procedure alloc_tmp
  tmp_sp += 1
  tmp <=> tmp_stack[tmp_sp]